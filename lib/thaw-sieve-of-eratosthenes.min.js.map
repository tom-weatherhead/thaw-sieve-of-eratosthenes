{"version":3,"sources":["thaw-sieve-of-eratosthenes.js"],"names":["global","isPrime","m","primes","p","sieve","n","parseInt","isNaN","Error","push","factorize","factors","m_increment","exports","define","amd","version","module","window"],"mappings":"AAQC,UAAUA,CAAV,CAAkB,CAUlB,QAASC,EAAT,CAAkBC,CAAlB,CAAqBC,CAArB,CAA6B,CAE5B,IAAK,GAAIC,EAAT,GAAcD,EAAd,CAAsB,CAErB,GAAIC,EAAIA,CAAJ,CAAQF,CAAZ,CACC,SAGD,GAAc,CAAV,IAAIE,CAAR,CACC,QAED,CAED,QACA,CASD,QAASC,EAAT,CAAgBC,CAAhB,CAAmB,CAMlB,GAFAA,EAAIC,SAASD,CAAT,CAAY,EAAZ,CAEJ,CAAIE,MAAMF,CAAN,CAAJ,CACC,KAAM,IAAIG,MAAJ,CAAU,kBAAV,CAAN,CADD,IAEO,IAAS,CAAL,GAAJ,CACN,MAAO,EAAP,CAGD,GAAIN,GAAS,CAAC,CAAD,CAAb,CAEA,IAAK,GAAID,GAAI,CAAb,CAAgBA,EAAII,CAApB,CAAuBJ,GAAK,CAA5B,CAEKD,EAAQC,CAAR,CAAWC,CAAX,CAFL,EAGEA,EAAOO,IAAP,CAAYR,CAAZ,CAHF,CAOA,MAAOC,EACP,CASD,QAASQ,EAAT,CAAoBL,CAApB,CAAuB,CAMtB,GAFAA,EAAIC,SAASD,CAAT,CAAY,EAAZ,CAEJ,CAAIE,MAAMF,CAAN,CAAJ,CACC,KAAM,IAAIG,MAAJ,CAAU,kBAAV,CAAN,CADD,IAEO,IAAQ,CAAJ,EAAJ,CACN,MAAO,EAAP,CASD,OANIN,GAAS,EAMb,CALIS,EAAU,EAKd,CAJIV,EAAI,CAIR,CAHIW,EAAc,CAGlB,GAAS,CAGR,GAAIX,EAAIA,CAAJ,CAAQI,CAAZ,CAIC,MAHAM,GAAQF,IAAR,CAAaJ,CAAb,CAGA,CAAOM,CAAP,CAGD,GAAIX,EAAQC,CAAR,CAAWC,CAAX,CAAJ,KACCA,EAAOO,IAAP,CAAYR,CAAZ,CADD,CAGkB,CAAV,IAAIA,CAHZ,EAOE,GAHAI,GAAKJ,CAGL,CAFAU,EAAQF,IAAR,CAAaR,CAAb,CAEA,CAAU,CAAN,IAAJ,CAGC,MAAOU,EAAP,CAKHV,GAAKW,CAzBG,CA0BRA,EAAc,CACd,CAMD,CAMsB,WAAnB,QAAOC,QAzHO,CA+HW,UAAlB,QAAOC,OAAP,EAA+C,IAAK,EAApB,UAAOC,GA/HhC,CAgIjBD,OAAO,KACC,CACNE,QAXa,OAUP,CAENZ,MAAOA,CAFD,CAGNM,UAAWA,CAHL,CADD,CAAP,CAhIiB,EAwIjBX,EAAOK,KAAP,CAAeA,CAxIE,CAyIjBL,EAAOW,SAAP,CAAmBA,CAzIF,EA0HjBO,OAAOJ,OAAP,CAAiB,CAChBG,eADgB,CAEhBZ,MAAOA,CAFS,CAGhBM,UAAWA,CAHK,CAiBlB,CA3IA,EA2ImB,WAAlB,QAAOQ,OAAP,CAAyCnB,MAAzC,CAAgCmB,MA3IjC,C","file":"unknown","sourcesContent":["/**\n * The Sieve of Eratosthenes (an ancient Greek prime number generator) as a JavaScript library\n *\n * @author Tom Weatherhead\n * @copyright 2018\n * @license MIT\n * @version 0.0.0\n */\n(function (global) {\n\n\t/**\n\t * isPrime\n\t *\n\t * @method isPrime\n\t * @param  {Int}   \t\tm          \t\tThe integer to be tested\n\t * @param  {Array<Int>}\tprimes          The array of primes found thus far\n\t * @return {Boolean}                \tThe Boolean that indicates whether or not m is prime\n\t */\n\tfunction isPrime (m, primes) {\n\n\t\tfor (let p of primes) {\n\n\t\t\tif (p * p > m) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (m % p === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * sieve\n\t *\n\t * @method sieve\n\t * @param  {Mixed}   n          \t\tString, Int or Float representation of the ceiling\n\t * @return {Array<Int>}                \tThe list of prime numbers less than n\n\t */\n\tfunction sieve (n) {\t\t\t\t\t// eslint-disable-line no-unused-vars\n\t\t// See https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\n\t\t// Ensure than n is an integer. Convert if necessary.\n\t\tn = parseInt(n, 10);\n\n\t\tif (isNaN(n)) {\n\t\t\tthrow new Error('Invalid argument');\n\t\t} else if (n <= 2) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet primes = [2];\n\n\t\tfor (let m = 3; m < n; m += 2) {\n\n\t\t\tif (isPrime(m, primes)) {\n\t\t\t\tprimes.push(m);\n\t\t\t}\n\t\t}\n\n\t\treturn primes;\n\t}\n\n\t/**\n\t * factorize\n\t *\n\t * @method factorize\n\t * @param  {Mixed}   n          \t\tString, Int or Float representation of n, the integer to factorize\n\t * @return {Array<Int>}                \tThe list of prime factors of n\n\t */\n\tfunction factorize (n) {\t\t\t\t\t// eslint-disable-line no-unused-vars\n\t\t//const original_n = n;\n\n\t\t// Ensure than n is an integer. Convert if necessary.\n\t\tn = parseInt(n, 10);\n\n\t\tif (isNaN(n)) {\n\t\t\tthrow new Error('Invalid argument');\n\t\t} else if (n < 2) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet primes = [];\n\t\tlet factors = [];\n\t\tlet m = 2;\n\t\tlet m_increment = 1;\n\n\t\t//while (true) {\t\t// eslint-disable-line no-constant-condition\n\t\tfor (;;) {\n\t\t\t//console.log('m =', m);\n\n\t\t\tif (m * m > n) {\n\t\t\t\tfactors.push(n);\n\t\t\t\t//console.log('Return 1', original_n, m, n, primes, factors);\n\n\t\t\t\treturn factors;\n\t\t\t}\n\n\t\t\tif (isPrime(m, primes)) {\n\t\t\t\tprimes.push(m);\n\n\t\t\t\twhile (n % m === 0) {\n\t\t\t\t\tn /= m;\n\t\t\t\t\tfactors.push(m);\n\n\t\t\t\t\tif (n === 1) {\n\t\t\t\t\t\t//console.log('Return 2', original_n, m, n, primes, factors);\n\n\t\t\t\t\t\treturn factors;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tm += m_increment;\n\t\t\tm_increment = 2;\n\t\t}\n\n\t\t// Unreachable code:\n\t\t//console.log('Return 3', original_n, n, primes, factors);\n\n\t\t//return factors;\n\t}\n\n\t// Node, AMD & window supported\n\n\tconst version = '0.0.0';\n\n\tif (typeof exports !== 'undefined') {\n\t\tmodule.exports = {\n\t\t\tversion: version,\n\t\t\tsieve: sieve,\n\t\t\tfactorize: factorize\n\t\t};\n\t} else if (typeof define === 'function' && define.amd !== void 0) {\n\t\tdefine(() => {\n\t\t\treturn {\n\t\t\t\tversion: version,\n\t\t\t\tsieve: sieve,\n\t\t\t\tfactorize: factorize\n\t\t\t};\n\t\t});\n\t} else {\n\t\tglobal.sieve = sieve;\n\t\tglobal.factorize = factorize;\n\t}\n}(typeof window !== 'undefined' ? window : global));\n"]}