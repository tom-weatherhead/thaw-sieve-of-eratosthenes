{"version":3,"sources":["thaw-sieve-of-eratosthenes.js"],"names":["global","isPrime","m","primes","p","range","start","end","Array","from","keys","map","n","sieve","limit","parseInt","isNaN","Error","numbers","length","shift","push","filter","factorize","factors","m_increment","exports","define","amd","version","module","window"],"mappings":"AAAA;;;;;;;GAQC,UAAUA,CAAV,CAAkB,CAElB;;;;;;;IAQA,QAASC,EAAT,CAAkBC,CAAlB,CAAqBC,CAArB,CAA6B,CAE5B,IAAK,GAAIC,EAAT,GAAcD,EAAd,CAAsB,CAErB,GAAIC,EAAIA,CAAJ,CAAQF,CAAZ,CACC,SAGD,GAAc,CAAV,IAAIE,CAAR,CACC,QAED,CAED,QACA,CAED;AAEA;;;;;;;IAQA,QAASC,EAAT,CAAgBC,CAAhB,CAAuBC,CAAvB,CAA4B,CAC3B;AAEA,MAAO,CAAC,GAAGC,MAAMC,IAAN,CAAWD,MAAMD,EAAMD,CAAN,CAAc,CAApB,EAAuBI,IAAvB,EAAX,CAAJ,EAA+CC,GAA/C,CAAmDC,GAAKN,EAAQM,CAAhE,CAAP,CAA2E;AAC3E,CAED;;;;;;IAOA,QAASC,EAAT,CAAgBC,CAAhB,CAAuB,CAItB,GAFAA,EAAQC,SAASD,CAAT,CAAgB,EAAhB,CAER,CAAIE,MAAMF,CAAN,CAAJ,CACC,KAAM,IAAIG,MAAJ,CAAU,kBAAV,CAAN,CAGD,GAAIC,GAAUb,EAAM,CAAN,CAASS,EAAQ,CAAjB,CAAd,CACA,KAAMX,GAAS,EAAf,CATsB,KAWfe,EAAQC,MAXO,EAWC,CACtB,KAAMf,GAAIc,EAAQE,KAAR,EAAV,CAEAjB,EAAOkB,IAAP,CAAYjB,CAAZ,CAHsB,CAItBc,EAAUA,EAAQI,MAAR,CAAeV,GAAe,CAAV,IAAIR,CAAxB,CACV,CAED,MAAOD,EACP,CAED;;;;;;IAOA,QAASoB,EAAT,CAAoBX,CAApB,CAAuB,CAItB,GAFAA,EAAIG,SAASH,CAAT,CAAY,EAAZ,CAEJ,CAAII,MAAMJ,CAAN,CAAJ,CACC,KAAM,IAAIK,MAAJ,CAAU,kBAAV,CAAN,CADD,IAEO,IAAQ,CAAJ,EAAJ,CACN,MAAO,EAAP,CAQD,OALId,GAAS,EAKb,CAJIqB,EAAU,EAId,CAHItB,EAAI,CAGR,CAFIuB,EAAc,CAElB,GAAS,CAER,GAAIvB,EAAIA,CAAJ,CAAQU,CAAZ,CAGC,MAFAY,GAAQH,IAAR,CAAaT,CAAb,CAEA,CAAOY,CAAP,CAGD,GAAIvB,EAAQC,CAAR,CAAWC,CAAX,CAAJ,KACCA,EAAOkB,IAAP,CAAYnB,CAAZ,CADD,CAGkB,CAAV,IAAIA,CAHZ,EAOE,GAHAU,GAAKV,CAGL,CAFAsB,EAAQH,IAAR,CAAanB,CAAb,CAEA,CAAU,CAAN,IAAJ,CACC,MAAOsB,EAAP,CAKHtB,GAAKuB,CArBG,CAsBRA,EAAc,CACd,CAED;AAEA;AACA,CAED;AAIuB,WAAnB,QAAOC,QA9HO,CAoIW,UAAlB,QAAOC,OAAP,EAA+C,IAAK,EAApB,UAAOC,GApIhC,CAqIjBD,OAAO,KACC,CACNE,QAXa,OAUP,CAENhB,MAAOA,CAFD,CAGNU,UAAWA,CAHL,CADD,CAAP,CArIiB,EA6IjBvB,EAAOa,KAAP,CAAeA,CA7IE,CA8IjBb,EAAOuB,SAAP,CAAmBA,CA9IF,EA+HjBO,OAAOJ,OAAP,CAAiB,CAChBG,eADgB,CAEhBhB,MAAOA,CAFS,CAGhBU,UAAWA,CAHK,CAiBlB,CAhJA,EAgJmB,WAAlB,QAAOQ,OAAP,CAAyC/B,MAAzC,CAAgC+B,MAhJjC,C","file":"unknown","sourcesContent":["/**\r\n * The Sieve of Eratosthenes (an ancient Greek prime number generator) as a JavaScript library\r\n *\r\n * @author Tom Weatherhead\r\n * @copyright 2019\r\n * @license MIT\r\n * @version 0.0.0\r\n */\r\n(function (global) {\n\r\n\t/**\n\t * isPrime\n\t *\n\t * @method isPrime\n\t * @param  {Int}   \t\tm          \t\tThe integer to be tested\n\t * @param  {Array<Int>}\tprimes          The array of primes found thus far\n\t * @return {Boolean}                \tThe Boolean that indicates whether or not m is prime\n\t */\n\tfunction isPrime (m, primes) {\n\n\t\tfor (let p of primes) {\n\n\t\t\tif (p * p > m) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (m % p === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// range() : Stolen from https://stackoverflow.com/questions/36947847/how-to-generate-range-of-numbers-from-0-to-n-in-es2015-only#comment68007528_36953272\n\n\t/**\n\t * range\n\t *\n\t * @method range\n\t * @param  {Int}   start          \t\tThe smallest integer in the array to be generated\n\t * @param  {Int}   end          \t\tThe largest integer in the array to be generated\n\t * @return {Array<Int>}                \tThe integers from start to end, inclusive, in increasing order\n\t */\n\tfunction range (start, end) {\n\t\t// return [...Array(end - start + 1).keys()].map(n => start + n);\n\n\t\treturn [...Array.from(Array(end - start + 1).keys())].map(n => start + n); // The Array.from() is for TypeScript, where Array.keys() returns an iterator, not an array.\n\t}\n\n\t/**\n\t * sieve\n\t *\n\t * @method sieve\n\t * @param  {Mixed}   n          \t\tString, Int or Float representation of the ceiling\n\t * @return {Array<Int>}                \tThe list of prime numbers less than n\n\t */\n\tfunction sieve (limit) {\n\t\t// Ensure than limit is an integer. Convert if necessary.\n\t\tlimit = parseInt(limit, 10);\n\n\t\tif (isNaN(limit)) {\n\t\t\tthrow new Error('Invalid argument');\n\t\t}\n\n\t\tlet numbers = range(2, limit - 1);\n\t\tconst primes = [];\n\n\t\twhile (numbers.length) {\n\t\t\tconst p = numbers.shift();\n\n\t\t\tprimes.push(p);\n\t\t\tnumbers = numbers.filter(n => n % p !== 0);\n\t\t}\n\n\t\treturn primes;\n\t}\n\n\t/**\n\t * factorize\n\t *\n\t * @method factorize\n\t * @param  {Mixed}   n          \t\tString, Int or Float representation of n, the integer to factorize\n\t * @return {Array<Int>}                \tThe list of prime factors of n\n\t */\n\tfunction factorize (n) {\n\t\t// Ensure than n is an integer. Convert if necessary.\n\t\tn = parseInt(n, 10);\n\n\t\tif (isNaN(n)) {\n\t\t\tthrow new Error('Invalid argument');\n\t\t} else if (n < 2) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet primes = [];\n\t\tlet factors = [];\n\t\tlet m = 2;\n\t\tlet m_increment = 1;\n\n\t\tfor (;;) {\n\n\t\t\tif (m * m > n) {\n\t\t\t\tfactors.push(n);\n\n\t\t\t\treturn factors;\n\t\t\t}\n\n\t\t\tif (isPrime(m, primes)) {\n\t\t\t\tprimes.push(m);\n\n\t\t\t\twhile (n % m === 0) {\n\t\t\t\t\tn /= m;\n\t\t\t\t\tfactors.push(m);\n\n\t\t\t\t\tif (n === 1) {\n\t\t\t\t\t\treturn factors;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tm += m_increment;\n\t\t\tm_increment = 2;\n\t\t}\n\n\t\t// Unreachable code:\n\n\t\t//return factors;\n\t}\n\r\n\t// Node, AMD & window supported\n\n\tconst version = '0.0.0';\n\n\tif (typeof exports !== 'undefined') {\n\t\tmodule.exports = {\n\t\t\tversion: version,\n\t\t\tsieve: sieve,\n\t\t\tfactorize: factorize\n\t\t};\n\t} else if (typeof define === 'function' && define.amd !== void 0) {\n\t\tdefine(() => {\n\t\t\treturn {\n\t\t\t\tversion: version,\n\t\t\t\tsieve: sieve,\n\t\t\t\tfactorize: factorize\n\t\t\t};\n\t\t});\n\t} else {\n\t\tglobal.sieve = sieve;\n\t\tglobal.factorize = factorize;\n\t}\n}(typeof window !== 'undefined' ? window : global));\n"]}