{"version":3,"sources":["thaw-sieve-of-eratostheneses6.js"],"names":["primes","p","m","parseInt","n","isNaN","Error","isPrime","push","factors","m_increment","exports","define","amd","sieve","factorize","global","module","window"],"mappings":"AAOC,YAAkB,CAUlB,eAA6B,CAE5B,IAAK,GAAI,EAAT,GAAcA,EAAd,CAAsB,CAErB,GAAIC,EAAIA,CAAJ,CAAQC,CAAZ,CACC,SAGD,GAAc,CAAV,IAAID,CAAR,CACC,QAED,CAED,QACA,CASD,aAAmB,CAMlB,GAFA,EAAIE,SAASC,CAAT,CAAY,EAAZ,CAEJ,CAAIC,MAAMD,CAAN,CAAJ,CACC,KAAM,IAAIE,MAAJ,CAAU,kBAAV,CAAN,CADD,IAEO,IAAS,CAAL,GAAJ,CACN,SAGD,GAAI,MAAJ,CAEA,IAAK,GAAI,GAAI,CAAb,CAAgBJ,EAAIE,CAApB,CAAuB,GAAK,CAA5B,CAEKG,EAAQL,CAAR,CAAWF,CAAX,CAFL,EAGEA,EAAOQ,IAAP,CAAYN,CAAZ,CAHF,CAOA,MAAOF,EACP,CASD,aAAuB,CAMtB,GAFA,EAAIG,SAASC,CAAT,CAAY,EAAZ,CAEJ,CAAIC,MAAMD,CAAN,CAAJ,CACC,KAAM,IAAIE,MAAJ,CAAU,kBAAV,CAAN,CADD,IAEO,IAAQ,CAAJ,EAAJ,CACN,SASD,OANI,KAMJ,CALI,IAKJ,CAJI,EAAI,CAIR,CAHI,EAAc,CAGlB,GAAS,CAGR,GAAIJ,EAAIA,CAAJ,CAAQE,CAAZ,CAIC,MAHAK,GAAQD,IAAR,CAAaJ,CAAb,CAGA,CAAOK,CAAP,CAGD,GAAIF,EAAQL,CAAR,CAAWF,CAAX,CAAJ,KACCA,EAAOQ,IAAP,CAAYN,CAAZ,CADD,CAGkB,CAAV,IAAIA,CAHZ,EAOE,GAHA,GAAKA,CAGL,CAFAO,EAAQD,IAAR,CAAaN,CAAb,CAEA,CAAU,CAAN,IAAJ,CAGC,MAAOO,EAAP,CAKH,GAAKC,CAzBG,CA0BR,EAAc,CACd,CAMD,CAGsB,WAAnB,QAAOC,QAtHO,CA2HW,UAAlB,QAAOC,OAAP,EAAgCA,OAAOC,GA3HhC,CA4HjBD,OAAO,IAAM,CACZ,MAAO,CACNE,MAAOA,CADD,CAENC,UAAWA,CAFL,CAIP,CALD,CA5HiB,EAmIjBC,EAAOF,KAAP,CAAeA,CAnIE,CAoIjBE,EAAOD,SAAP,CAAmBA,CApIF,EAuHjBE,OAAON,OAAP,CAAiB,CAChBG,MAAOA,CADS,CAEhBC,UAAWA,CAFK,CAelB,CAtIA,EAsImB,WAAlB,QAAOG,OAAP,CAAyCF,MAAzC,CAAgCE,MAtIjC,C","file":"unknown","sourcesContent":["/**\n * thaw-sieve-of-eratosthenes\n *\n * @copyright 2018 Tom Weatherhead\n * @license MIT\n * @version 0.0.0\n */\n(function (global) {\n\n\t/**\n\t * isPrime\n\t *\n\t * @method isPrime\n\t * @param  {Int}   \t\tm          \t\tThe integer to be tested\n\t * @param  {Array<Int>}\tprimes          The array of primes found thus far\n\t * @return {Boolean}                \tThe Boolean that indicates whether or not m is prime\n\t */\n\tfunction isPrime (m, primes) {\n\n\t\tfor (let p of primes) {\n\n\t\t\tif (p * p > m) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (m % p === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * sieve\n\t *\n\t * @method sieve\n\t * @param  {Mixed}   n          \t\tString, Int or Float representation of the ceiling\n\t * @return {Array<Int>}                \tThe list of prime numbers less than n\n\t */\n\tfunction sieve (n) {\t\t\t\t\t// eslint-disable-line no-unused-vars\n\t\t// See https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\n\t\t// Ensure than n is an integer. Convert if necessary.\n\t\tn = parseInt(n, 10);\n\n\t\tif (isNaN(n)) {\n\t\t\tthrow new Error('Invalid argument');\n\t\t} else if (n <= 2) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet primes = [2];\n\n\t\tfor (let m = 3; m < n; m += 2) {\n\n\t\t\tif (isPrime(m, primes)) {\n\t\t\t\tprimes.push(m);\n\t\t\t}\n\t\t}\n\n\t\treturn primes;\n\t}\n\n\t/**\n\t * factorize\n\t *\n\t * @method factorize\n\t * @param  {Mixed}   n          \t\tString, Int or Float representation of n, the integer to factorize\n\t * @return {Array<Int>}                \tThe list of prime factors of n\n\t */\n\tfunction factorize (n) {\t\t\t\t\t// eslint-disable-line no-unused-vars\n\t\t//const original_n = n;\n\n\t\t// Ensure than n is an integer. Convert if necessary.\n\t\tn = parseInt(n, 10);\n\n\t\tif (isNaN(n)) {\n\t\t\tthrow new Error('Invalid argument');\n\t\t} else if (n < 2) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet primes = [];\n\t\tlet factors = [];\n\t\tlet m = 2;\n\t\tlet m_increment = 1;\n\n\t\t//while (true) {\t\t// eslint-disable-line no-constant-condition\n\t\tfor (;;) {\n\t\t\t//console.log('m =', m);\n\n\t\t\tif (m * m > n) {\n\t\t\t\tfactors.push(n);\n\t\t\t\t//console.log('Return 1', original_n, m, n, primes, factors);\n\n\t\t\t\treturn factors;\n\t\t\t}\n\n\t\t\tif (isPrime(m, primes)) {\n\t\t\t\tprimes.push(m);\n\n\t\t\t\twhile (n % m === 0) {\n\t\t\t\t\tn /= m;\n\t\t\t\t\tfactors.push(m);\n\n\t\t\t\t\tif (n === 1) {\n\t\t\t\t\t\t//console.log('Return 2', original_n, m, n, primes, factors);\n\n\t\t\t\t\t\treturn factors;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tm += m_increment;\n\t\t\tm_increment = 2;\n\t\t}\n\n\t\t// Unreachable code:\n\t\t//console.log('Return 3', original_n, n, primes, factors);\n\n\t\t//return factors;\n\t}\n\n\t// CommonJS, AMD, script tag\n\tif (typeof exports !== 'undefined') {\n\t\tmodule.exports = {\n\t\t\tsieve: sieve,\n\t\t\tfactorize: factorize\n\t\t};\n\t} else if (typeof define === 'function' && define.amd) {\n\t\tdefine(() => {\n\t\t\treturn {\n\t\t\t\tsieve: sieve,\n\t\t\t\tfactorize: factorize\n\t\t\t};\n\t\t});\n\t} else {\n\t\tglobal.sieve = sieve;\n\t\tglobal.factorize = factorize;\n\t}\n}(typeof window !== 'undefined' ? window : global));\n"]}