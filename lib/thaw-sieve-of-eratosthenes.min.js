/*
 * thaw-sieve-of-eratosthenes
 * Copyright Â© 2019 Tom Weatherhead
 * @version 0.0.0
 */
'use strict';
/**
 * The Sieve of Eratosthenes (an ancient Greek prime number generator) as a JavaScript library
 *
 * @author Tom Weatherhead
 * @copyright 2019
 * @license MIT
 * @version 0.0.0
 */(function(a){/**
	 * isPrime
	 *
	 * @method isPrime
	 * @param  {Int}   		m          		The integer to be tested
	 * @param  {Array<Int>}	primes          The array of primes found thus far
	 * @return {Boolean}                	The Boolean that indicates whether or not m is prime
	 */function b(a,b){for(let c of b){if(c*c>a)return!0;if(0==a%c)return!1}return!0}// range() : Stolen from https://stackoverflow.com/questions/36947847/how-to-generate-range-of-numbers-from-0-to-n-in-es2015-only#comment68007528_36953272
/**
	 * range
	 *
	 * @method range
	 * @param  {Int}   start          		The smallest integer in the array to be generated
	 * @param  {Int}   end          		The largest integer in the array to be generated
	 * @return {Array<Int>}                	The integers from start to end, inclusive, in increasing order
	 */function c(a,b){// return [...Array(end - start + 1).keys()].map(n => start + n);
return[...Array.from(Array(b-a+1).keys())].map(b=>a+b);// The Array.from() is for TypeScript, where Array.keys() returns an iterator, not an array.
}/**
	 * sieve
	 *
	 * @method sieve
	 * @param  {Mixed}   n          		String, Int or Float representation of the ceiling
	 * @return {Array<Int>}                	The list of prime numbers less than n
	 */function d(a){if(a=parseInt(a,10),isNaN(a))throw new Error('Invalid argument');let b=c(2,a-1);const d=[];for(;b.length;){const a=b.shift();d.push(a),b=b.filter(b=>0!=b%a)}return d}/**
	 * factorize
	 *
	 * @method factorize
	 * @param  {Mixed}   n          		String, Int or Float representation of n, the integer to factorize
	 * @return {Array<Int>}                	The list of prime factors of n
	 */function e(a){if(a=parseInt(a,10),isNaN(a))throw new Error('Invalid argument');else if(2>a)return[];for(let c=[],d=[],e=2,f=1;;){if(e*e>a)return d.push(a),d;if(b(e,c))for(c.push(e);0==a%e;)if(a/=e,d.push(e),1===a)return d;e+=f,f=2}// Unreachable code:
//return factors;
}// Node, AMD & window supported
'undefined'==typeof exports?'function'==typeof define&&void 0!==define.amd?define(()=>({version:'0.0.0',sieve:d,factorize:e})):(a.sieve=d,a.factorize=e):module.exports={version:'0.0.0',sieve:d,factorize:e}})('undefined'==typeof window?global:window);
//# sourceMappingURL=thaw-sieve-of-eratosthenes.min.js.map